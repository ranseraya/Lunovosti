generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model advertisements {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  title          String    @db.VarChar(100)
  image_url      String    @db.VarChar(255)
  target_url     String    @db.VarChar(255)
  placement_area String    @db.VarChar(50)
  start_date     DateTime? @db.Date
  end_date       DateTime? @db.Date
  is_active      Boolean   @default(true)
}

model article_tags {
  article_id BigInt   @db.UnsignedBigInt
  tag_id     BigInt   @db.UnsignedBigInt
  articles   articles @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "article_tags_article_id_foreign")
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "article_tags_tag_id_foreign")

  @@id([article_id, tag_id])
  @@index([tag_id], map: "article_tags_tag_id_foreign")
}

model articles {
  id                 BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  author_id          BigInt          @db.UnsignedBigInt
  category_id        Int             @db.UnsignedInt
  title              String          @db.VarChar(255)
  slug               String          @unique(map: "articles_slug_unique") @db.VarChar(255)
  content            String          @db.LongText
  excerpt            String?         @db.Text
  featured_image_url String?         @db.VarChar(255)
  status             Status          @default(draft)
  published_at       DateTime?       @db.Timestamp(0)
  created_at         DateTime?       @default(now()) @db.Timestamp(0)
  updated_at         DateTime?       @default(now()) @db.Timestamp(0)
  article_tags       article_tags[]
  authors            authors         @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "articles_author_id_foreign")
  categories         categories      @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "articles_category_id_foreign")
  comments           comments[]
  notifications Notification[]
  bookmarks          Bookmark[]
  likes              Like[]

  @@index([author_id], map: "articles_author_id_foreign")
  @@index([category_id], map: "articles_category_id_foreign")
}

model authors {
  id                  BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt?    @unique(map: "authors_user_id_unique") @db.UnsignedBigInt
  name                String     @db.VarChar(100)
  slug                String     @unique(map: "authors_slug_unique") @db.VarChar(110)
  bio                 String?    @db.Text
  profile_picture_url String?    @db.VarChar(255)
  articles            articles[]
  users               users?     @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "authors_user_id_foreign")
}

model categories {
  id          Int        @id @default(autoincrement()) @db.UnsignedInt
  name        String     @unique(map: "categories_name_unique") @db.VarChar(50)
  slug        String     @unique(map: "categories_slug_unique") @db.VarChar(60)
  description String?    @db.TinyText
  articles    articles[]
}

model comments {
  id                BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  article_id        BigInt     @db.UnsignedBigInt
  user_id           BigInt?    @db.UnsignedBigInt
  parent_comment_id BigInt?    @db.UnsignedBigInt
  content           String     @db.Text
  author_name       String?    @db.VarChar(100)
  author_email      String?    @db.VarChar(100)
  created_at        DateTime?  @default(now()) @db.Timestamp(0)
  articles          articles   @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_article_id_foreign")
  comments          comments?  @relation("commentsTocomments", fields: [parent_comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_parent_comment_id_foreign")
  other_comments    comments[] @relation("commentsTocomments")
  users             users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_user_id_foreign")

  @@index([article_id], map: "comments_article_id_foreign")
  @@index([parent_comment_id], map: "comments_parent_comment_id_foreign")
  @@index([user_id], map: "comments_user_id_foreign")
}

model media_library {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uploaded_by_id BigInt    @db.UnsignedBigInt
  file_name      String    @db.VarChar(255)
  file_path      String    @db.VarChar(255)
  mime_type      String    @db.VarChar(100)
  alt_text       String?   @db.VarChar(255)
  caption        String?   @db.Text
  uploaded_at    DateTime? @default(now()) @db.Timestamp(0)
  users          users     @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "media_library_uploaded_by_id_foreign")

  @@index([uploaded_by_id], map: "media_library_uploaded_by_id_foreign")
}

model tags {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  name         String         @unique(map: "tags_name_unique") @db.VarChar(50)
  slug         String         @unique(map: "tags_slug_unique") @db.VarChar(60)
  article_tags article_tags[]
}

model users {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  username      String          @unique(map: "users_username_unique") @db.VarChar(50)
  email         String          @unique(map: "users_email_unique") @db.VarChar(100)
  password_hash String          @db.VarChar(255)
  role          Role            @default(subscriber)
  created_at    DateTime?       @default(now()) @db.Timestamp(0)
  updated_at    DateTime?       @default(now()) @db.Timestamp(0)
  authors       authors?
  comments      comments[]
  media_library   media_library[]
  notifications   Notification[]
  bookmarks       Bookmark[]
  likes           Like[]
  following       Follow[]        @relation("Following")
  followers       Follow[]        @relation("Followers")
}

model Notification {
  id          BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt         @db.UnsignedBigInt
  message     String         @db.VarChar(255)
  read        Boolean        @default(false)
  article_id  BigInt?        @db.UnsignedBigInt
  type        NotificationType @default(COMMENT_REPLY)
  created_at  DateTime       @default(now())

  user        users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  article     articles?      @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([article_id])
}


model Bookmark {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt   @db.UnsignedBigInt
  article_id  BigInt   @db.UnsignedBigInt
  created_at  DateTime @default(now())

  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  article     articles @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@unique([user_id, article_id])
  @@index([user_id])
  @@index([article_id])
}

model Like {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt   @db.UnsignedBigInt
  article_id  BigInt   @db.UnsignedBigInt
  created_at  DateTime @default(now())

  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  article     articles @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@unique([user_id, article_id])
  @@index([user_id])
  @@index([article_id])
}

model Follow {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  follower_id  BigInt   @db.UnsignedBigInt
  following_id BigInt   @db.UnsignedBigInt
  created_at   DateTime @default(now())

  follower     users    @relation("Following", fields: [follower_id], references: [id], onDelete: Cascade)
  following    users    @relation("Followers", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@index([follower_id])
  @@index([following_id])
}

enum Role  {
  admin
  editor
  author
  subscriber
  premium 
}

enum Status  {
  draft
  pending_review
  published
  archived
}

enum NotificationType {
  COMMENT_REPLY
  NEW_ARTICLE
  FOLLOW
}